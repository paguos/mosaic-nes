package com.nebula.stream;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import stream.nebula.model.logicalstream.LogicalStream;
import stream.nebula.operators.*;
import stream.nebula.operators.windowdefinition.SlidingWindow;
import stream.nebula.operators.windowdefinition.TumblingWindow;
import stream.nebula.queryinterface.Query;
import stream.nebula.runtime.NebulaStreamRuntime;

/*
This test check if the nes java client produces queries that can be submitted to the NebulaStream
 */
public class QuerySubmissionTest {
    private static NebulaStreamRuntime ner;
    @BeforeClass
    public static void init() {
        ner = NebulaStreamRuntime.getRuntime();
        ner.getConfig().setHost("localhost")
                .setPort("8081");
        // TODO: Currently this call return 501: Not Implemented. We need to fix it from the NES REST Endpoint side (NES issue #1458).
        //Assert.assertTrue(ner.checkConnection());
    }

    /*
    Check if submitting queries with a filter operator generated by the nes client replied with a query id by the NebulaStream
     */
    @Test
    public void executeFilterOperatorRepliedWithAQueyId() throws Exception {
        LogicalStream defaultLogical = ner.getLogicalStream("default_logical");

        // Filter with a single predicate
        Query filterWithOnePredicateQuery = new Query();
        filterWithOnePredicateQuery.from(defaultLogical)
                .filter(Predicate.onField(1).greaterThan(42))
                .print();
        int filterWithOnePredicateQueryId = ner.executeQuery(filterWithOnePredicateQuery.generateCppCode(), "BottomUp");
        Assert.assertNotNull(filterWithOnePredicateQueryId);

        // Filter with multiple predicates
        Query filterWithMultiplePredicateQuery = new Query();
        filterWithMultiplePredicateQuery.from(defaultLogical)
                .filter(Predicate.onField(1).greaterThan(100).and(Predicate.onField(1).greaterThan(200)))
                .print();
        int filterWithMultiplePredicateQueryId = ner.executeQuery(filterWithMultiplePredicateQuery.generateCppCode(), "BottomUp");
        Assert.assertNotNull(filterWithMultiplePredicateQueryId);
    }

    /*
    Check if submitting queries with a map operator generated by the nes client replied with a query id by the NebulaStream
     */
    @Test
    public void executeMapOperatorRepliedWithAQueyId() throws Exception {
        LogicalStream defaultLogical = ner.getLogicalStream("default_logical");

        // Map operator that assign a field with addition from another field
        Query queryWithMapOperation = new Query();
        queryWithMapOperation.from(defaultLogical)
                .map(Map.onField("value").assign(Operation.add("id","value")))
                .print();
        int queryWithMapOperationId = ner.executeQuery(queryWithMapOperation.generateCppCode(), "BottomUp");
        Assert.assertNotNull(queryWithMapOperationId);

        // Map operator that create a new field
        Query queryWithMapOperationOnNewField = new Query();
        queryWithMapOperationOnNewField.from(defaultLogical)
                .map(Map.onField("newfield").assign(Operation.add("id","value")))
                .print();
        int queryWithMapOperationOnNewFieldId = ner.executeQuery(queryWithMapOperationOnNewField.generateCppCode(), "BottomUp");
        Assert.assertNotNull(queryWithMapOperationOnNewFieldId);
    }

    /*
    Check if submitting queries with a window operator generated by the nes client replied with a query id by the NebulaStream
     */
    @Test
    public void executeWindowOperatorRepliedWithAQueyId() throws Exception {
        LogicalStream exdra = ner.getLogicalStream("exdra");

        // Test submitting tumbling Window
        Query tumblingWindowQuery = new Query();
        tumblingWindowQuery.from(exdra)
                .window(TumblingWindow.of(new EventTime("metadata_generated"), TimeMeasure.milliseconds(10)), Aggregation.sum("features_properties_capacity"))
                .print();
        int tumblingWindowQueryId = ner.executeQuery(tumblingWindowQuery.generateCppCode(), "BottomUp");
        Assert.assertNotNull(tumblingWindowQueryId);

        // Test submitting sliding Window
        Query slidingWindowQuery = new Query();
        slidingWindowQuery.from(exdra)
                .window(SlidingWindow.of(new EventTime("metadata_generated"), TimeMeasure.milliseconds(10), TimeMeasure.seconds(30)), Aggregation.sum("features_properties_capacity"))
                .print();
        int slidingWindowQueryId = ner.executeQuery(slidingWindowQuery.generateCppCode(), "BottomUp");
        Assert.assertNotNull(slidingWindowQueryId);
    }

    @Test
    public void executeUnionWithOperatorRepliedWithAQueyId() throws Exception {
        // get the exdra logical query
        LogicalStream exdra1 = ner.getLogicalStream("exdra");
        LogicalStream exdra2 = ner.getLogicalStream("exdra");

        // create the q1 Query
        Query q1 = new Query();
        q1.from(exdra1);

        // create the q2 Query
        Query q2 = new Query();
        q2.from(exdra2);

        // create the unionWith query
        q1.unionWith(q2).print();

        // assert that the query can be submitted
        int unionWithQueryId = ner.executeQuery(q1.generateCppCode(), "BottomUp");
        Assert.assertNotNull(unionWithQueryId);
    }
    /*
    Check if submitting queries with a window operator generated by the nes client replied with a query id by the NebulaStream
     */
    @Test
    public void executeWindowByKeyOperatorRepliedWithAQueyId() throws Exception {
        LogicalStream exdra = ner.getLogicalStream("exdra");

        // Test submitting tumbling Window
        Query tumblingWindowQuery = new Query();
        tumblingWindowQuery.from(exdra)
                .windowByKey("id", TumblingWindow.of(new EventTime("metadata_generated"), TimeMeasure.milliseconds(10)), Aggregation.sum("features_properties_capacity"))
                .print();
        int tumblingWindowQueryId = ner.executeQuery(tumblingWindowQuery.generateCppCode(), "BottomUp");
        Assert.assertNotNull(tumblingWindowQueryId);

        // Test submitting sliding Window
        Query slidingWindowQuery = new Query();
        slidingWindowQuery.from(exdra)
                .windowByKey("id", SlidingWindow.of(new EventTime("metadata_generated"), TimeMeasure.milliseconds(10), TimeMeasure.seconds(30)), Aggregation.sum("features_properties_capacity"))
                .print();
        int slidingWindowQueryId = ner.executeQuery(slidingWindowQuery.generateCppCode(), "BottomUp");
        Assert.assertNotNull(slidingWindowQueryId);
    }

    @Test
    public void executeJoinWithOperatorRepliedWithAQueyId() throws Exception {
        // get the exdra logical query
        LogicalStream exdra1 = ner.getLogicalStream("exdra");
        LogicalStream exdra2 = ner.getLogicalStream("exdra");

        // create the q1 Query
        Query q1 = new Query();
        q1.from(exdra1);

        // create the q2 Query
        Query q2 = new Query();
        q2.from(exdra2);

        // create the joinWith query
        q1.joinWith(q2, "features_properties_capacity", "features_properties_capacity",
                TumblingWindow.of(new EventTime("metadata_generated"), TimeMeasure.milliseconds(10))).print();

        // assert that the query can be submitted
        int joinQueryId = ner.executeQuery(q1.generateCppCode(), "BottomUp");
        Assert.assertNotNull(joinQueryId);
    }
}
